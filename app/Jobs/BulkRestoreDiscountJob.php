<?php

namespace App\Jobs;

use App\Models\Rule;
use App\Models\RuleVariant;
use App\Models\User;
use App\Services\ProductGraphQLService;
use Illuminate\Bus\Batchable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Foundation\Queue\Queueable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;

class BulkRestoreDiscountJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels, Batchable;

    protected User $shop;
    protected Rule $rule;
    protected Collection $ruleVariants;

    protected bool $isExpiryRevert; //Ph√¢n bi·ªát revert do expire hay do toggle off

    public function __construct(User $shop, Rule $rule, Collection $ruleVariants, bool $isExpiryRevert = false)
    {
        $this->shop = $shop;
        $this->rule = $rule;
        $this->ruleVariants = $ruleVariants;
        $this->isExpiryRevert = $isExpiryRevert;
    }

    public function handle(ProductGraphQLService $service): void
    {
        Log::info("üîÑ [BulkRestoreDiscountJob] B·∫Øt ƒë·∫ßu kh√¥i ph·ª•c gi√° cho rule ID {$this->rule->id}", [
            'is_expiry_revert' => $this->isExpiryRevert,
            'current_status' => $this->rule->status
        ]);

        $successCount = 0;

        foreach ($this->ruleVariants as $rv) {
            try {
                // ‚úÖ N·∫øu original_compare_at_price NULL, ch·ªâ c·∫≠p nh·∫≠t l·∫°i price th√¥i
                $update = $service->updateVariantPrices(
                    $this->shop,
                    $rv->product_id,
                    $rv->variant_id,
                    $rv->original_price,
                    $rv->original_compare_at_price
                );

                // Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ Shopify
                if (empty($update['userErrors'])) {
                    Log::info("‚úÖ Kh√¥i ph·ª•c th√†nh c√¥ng variant {$rv->variant_id}");
                    $rv->delete(); // X√≥a record v√¨ rule n√†y ƒë√£ ƒë∆∞·ª£c ph·ª•c h·ªìi xong
                    $successCount++;
                } else {
                    $errorMessage = "‚ùå L·ªói kh√¥i ph·ª•c variant {$rv->variant_id}: " . json_encode($update['userErrors']);
                    Log::error($errorMessage);
                    throw new \Exception($errorMessage); // Th√™m n√†y ƒë·ªÉ job fail n·∫øu error
                }
            } catch (\Exception $e) {
                Log::error("üí• Exception khi kh√¥i ph·ª•c variant {$rv->variant_id}: " . $e->getMessage());
            }
        }
        // ‚úÖ QUAN TR·ªåNG: CH·ªà set INACTIVE khi KH√îNG ph·∫£i revert do expire
        if (!$this->isExpiryRevert) {
            // Revert do toggle off ‚Üí set INACTIVE
            $this->rule->update(['status' => 'INACTIVE']);
            Log::info("üü¢ [Toggle Off] Ho√†n t·∫•t kh√¥i ph·ª•c. Status ‚Üí INACTIVE");
        } else {
            // Revert do expire ‚Üí GI·ªÆ ACTIVE, ch·ªâ log
            Log::info("üü¢ [Expiry] Ho√†n t·∫•t kh√¥i ph·ª•c. Status GI·ªÆ ACTIVE (v·∫´n b·∫≠t)");
        }

        Log::info("üìä K·∫øt qu·∫£: {$successCount}/{$this->ruleVariants->count()} variants kh√¥i ph·ª•c th√†nh c√¥ng");
    }
}
